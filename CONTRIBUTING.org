#+TITLE: Contributing to Gemini REPL 009
#+AUTHOR: AYGP-DR
#+DATE: 2025-07-26

* Contributing Guidelines

Thank you for your interest in contributing to Gemini REPL 009! This document provides guidelines for contributing to the project.

** Code of Conduct

By participating in this project, you agree to abide by our code of conduct:
- Be respectful and inclusive
- Welcome newcomers and help them get started
- Focus on constructive criticism
- Respect differing viewpoints and experiences

** How to Contribute

*** Reporting Issues

1. Check existing issues to avoid duplicates
2. Use issue templates when available
3. Provide detailed information:
   - Rust version (=rustc --version=)
   - Operating system
   - Steps to reproduce
   - Expected vs actual behavior
   - Error messages or logs

*** Suggesting Features

1. Open a discussion first for major features
2. Explain the use case and benefits
3. Consider implementation complexity
4. Reference similar features in other gemini-repl versions

*** Submitting Code

**** Setup Development Environment

#+BEGIN_SRC bash
# Clone the repository
git clone https://github.com/aygp-dr/gemini-repl-009.git
cd gemini-repl-009

# Install Rust (if needed)
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh

# Set up pre-commit hooks
cp scripts/pre-commit.sh .git/hooks/pre-commit
chmod +x .git/hooks/pre-commit

# Build and test
cargo build
cargo test
#+END_SRC

**** Development Workflow

1. Fork the repository
2. Create a feature branch:
   #+BEGIN_SRC bash
   git checkout -b feature/your-feature-name
   #+END_SRC

3. Make your changes following our coding standards
4. Write or update tests
5. Ensure all tests pass:
   #+BEGIN_SRC bash
   cargo test
   cargo clippy -- -D warnings
   cargo fmt -- --check
   #+END_SRC

6. Commit with descriptive messages:
   #+BEGIN_SRC bash
   git commit -m "feat: add new command for X"
   #+END_SRC

7. Push to your fork and create a Pull Request

*** Commit Message Convention

We use [[https://www.conventionalcommits.org/][Conventional Commits]]:

- =feat:= New feature
- =fix:= Bug fix
- =docs:= Documentation changes
- =style:= Formatting, missing semicolons, etc.
- =refactor:= Code restructuring
- =perf:= Performance improvements
- =test:= Adding or modifying tests
- =chore:= Maintenance tasks

Examples:
#+BEGIN_EXAMPLE
feat: add /model command to switch models
fix: handle rate limiting with exponential backoff
docs: update installation instructions for Windows
perf: optimize context pruning algorithm
#+END_EXAMPLE

** Coding Standards

*** Rust Style Guide

- Follow the official [[https://doc.rust-lang.org/1.0.0/style/][Rust Style Guide]]
- Use =cargo fmt= for formatting
- Use =cargo clippy= for linting
- Prefer explicit error handling over =unwrap()=
- Document public APIs with doc comments
- Write unit tests for new functionality

*** Project-Specific Conventions

- Keep modules focused and single-purpose
- Use descriptive variable names
- Implement =Display= and =Debug= for custom types
- Use =anyhow= for application errors
- Use =thiserror= for library errors
- Prefer =async/await= over raw futures

*** Documentation

- Update README.org for user-facing changes
- Update CHANGELOG.org following Keep a Changelog
- Add inline documentation for complex logic
- Include examples in doc comments
- Update org-mode source files if using literate programming

** Testing

*** Test Categories

1. *Unit Tests*: Test individual functions
   #+BEGIN_SRC rust
   #[cfg(test)]
   mod tests {
       use super::*;
       
       #[test]
       fn test_parse_command() {
           assert_eq!(parse_command("/help"), Command::Help);
       }
   }
   #+END_SRC

2. *Integration Tests*: Test component interactions
   - Located in =tests/= directory
   - Test API client with mocked responses
   - Test REPL command processing

3. *End-to-End Tests*: Test full workflows
   - Test actual API calls (with test API key)
   - Test session management
   - Test tool execution

*** Running Tests

#+BEGIN_SRC bash
# Run all tests
cargo test

# Run specific test
cargo test test_parse_command

# Run tests with output
cargo test -- --nocapture

# Run benchmarks
cargo bench
#+END_SRC

** Pull Request Process

1. *Pre-submission Checklist*:
   - [ ] Code follows style guidelines
   - [ ] Tests pass locally
   - [ ] Documentation is updated
   - [ ] Changelog entry added
   - [ ] No unnecessary dependencies added

2. *Review Process*:
   - PRs require at least one review
   - Address reviewer feedback
   - Keep PRs focused and atomic
   - Rebase on main if needed

3. *Merge Criteria*:
   - All CI checks pass
   - No unresolved conversations
   - Approved by maintainer
   - Up to date with main branch

** Release Process

1. Update version in =Cargo.toml=
2. Update CHANGELOG.org
3. Create annotated tag:
   #+BEGIN_SRC bash
   git tag -a v0.2.0 -m "Release version 0.2.0"
   #+END_SRC
4. Push tag: =git push origin v0.2.0=
5. GitHub Actions will build and create release

** Getting Help

- Open a discussion for questions
- Join our community chat (if available)
- Check existing issues and discussions
- Read the documentation thoroughly

** Recognition

Contributors will be recognized in:
- CHANGELOG.org for significant contributions
- GitHub contributors page
- Release notes

Thank you for contributing to Gemini REPL 009! ðŸ¦€ðŸ¤–